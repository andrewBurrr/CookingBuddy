@page "/searchResult"
@page "/searchResult/{searchBox}"
@using CookingBuddy.Models
@using CookingBuddy.Pages.ViewRecipe.model
@using CookingBuddy.Services
@using System.Collections;
@inject RecipeService RecipeServiceInj

@using CookingBuddy.Pages.search.model;

<div class="container body-container">
    <input class="form-control" type="text" placeholder="Chicken Tikka Masala" aria-label="default input example" @bind="@searchInput" @bind:event="oninput">
    <div class="accordion" id="accordionExample">
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingOne">
                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                    Filters
                </button>
            </h2>
            <div id="collapseOne" class="accordion-collapse collapse show" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
                <div class="accordion-body">
                    <div class="container form-check form-switch" style="padding-bottom:10px">
                        <label class="form-check-label" for="flexCheckDefault">
                            Total time(mins): @if(timeChecked){@timeFilter}
                        </label>
                        <input class="form-check-input" type="checkbox" id="flexSwitchCheckDefault" checked="@timeChecked" @oninput="()=>{ timeChecked=!timeChecked; timeFilter= maxTime;}">
                        @if (timeChecked)
                        {
                            <div class="container custom-card">
                                <input type="range" style="width:90%" max="@maxTime" @bind="@timeFilter" @bind:event="oninput" />
                                @maxTime
                            </div>
                        }

                    </div>
                    <div class="container form-check form-switch" style="padding-bottom:10px">
                        <label class="form-check-label" for="flexCheckDefault">
                            Calories(kcal): @if(caloriesChecked){@caloriesFilter}
                        </label>
                        <input class="form-check-input" type="checkbox" id="flexSwitchCheckDefault" checked="@caloriesChecked" @oninput="()=> {caloriesChecked=!caloriesChecked; caloriesFilter=maxCalories;}">
                        @if (caloriesChecked)
                        {
                            <div class="container custom-card">
                                <input type="range" style="width:90%" max="@maxCalories" @bind="@caloriesFilter" @bind:event="oninput" />
                                @maxCalories.ToString("0")
                            </div>
                        }

                    </div>
                    <div class="container form-check form-switch" style="padding-bottom:10px">
                        <label class="form-check-label" for="flexCheckDefault">
                            Price($): @if(priceChecked){@priceFilter}
                        </label>
                        <input class="form-check-input" type="checkbox" id="flexSwitchCheckDefault" checked="@priceChecked" @oninput="()=> {priceChecked=!priceChecked; priceFilter = maxPrice;}">
                        @if (priceChecked)
                        {
                            <div class="container custom-card">
                                <input type="range" style="width:90%" max="@maxPrice" @bind="@priceFilter" @bind:event="oninput" />
                                @maxPrice.ToString("0.00")
                            </div>
                        }

                    </div>
                    <div class="container form-check form-switch" style="padding-bottom:10px">
                        <label class="form-check-label" for="flexCheckDefault">
                            Ratings: @if (ratingsChecked) { @ratingsFilter }
                        </label>

                        <input class="form-check-input" type="checkbox" id="flexSwitchCheckDefault" checked="@ratingsChecked" @oninput="()=> {ratingsChecked=!ratingsChecked; ratingsFilter= maxRatings;}">
                        @if (ratingsChecked)
                        {
                            <div class="container custom-card">
                                <input type="range" style="width:90%" step="1" min="0" max="@maxRatings" @bind="@ratingsFilter" @bind:event="oninput" />
                                @maxRatings.ToString("0.00")
                            </div>
                        }

                    </div>
                    <div class="container" style="padding-bottom:10px">
                        Difficulty<br />
                        <input class="form-check-input" type="checkbox" value="" id="flexCheckDefault" checked="@expertChecked" @oninput="(()=> expertChecked=!expertChecked)">
                        <label class="form-check-label" for="flexCheckDefault" style="padding-right:7px">
                            Expert
                        </label>
                        <input class="form-check-input" type="checkbox" value="" id="flexCheckDefault" checked="@homeCookChecked" @oninput="()=> homeCookChecked=!homeCookChecked">
                        <label class="form-check-label" for="flexCheckDefault" style="padding-right:7px">
                            Home cook
                        </label>
                        <input class="form-check-input" type="checkbox" value="" id="flexCheckDefault" checked="@beginnerChecked" @oninput="()=> beginnerChecked=!beginnerChecked">
                        <label class="form-check-label" for="flexCheckDefault " style="padding-right:7px">
                            Beginner
                        </label>
                    </div>
                    <div class="container">
                        Indgredients<br />
                        <div style=" width: 100%" class="input-group position-relative d-inline-flex align-items-center">
                            <input @bind="ingredientInput" @onkeyup="@IngredientChanged" class="form-control d-flex w-100 justify-content-center" placeholder="(e.g Chicken, Lettuce, etc)" aria-label="default input example" />

                            @if (ingredientInput.Length > 0)
                            {

                                <i @onclick="ClearIngredient" class="bi bi-x-lg position-absolute"
                               style="
                                  right: 10px;
                                  cursor: pointer;
                                  z-index: 100;">
                                </i>
                            }
                        </div>
                        <ul class="list-group list-group-flush">
                            @foreach (var ing in ingredients)
                            {
                                <li class="list-group-item" @key="@ing">
                                    <div class="row">
                                        <div class="col">
                                            @ing
                                        </div>
                                        <div class="col text-end">
                                            <span class="oi bi bi-x-circle-fill" style="color:red" @onclick="@(()=>ingredients.Remove(ing))"></span>
                                        </div>
                                    </div>
                                </li>
                            }

                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <br />
    <br />
    @if (recipes == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="row">
            @foreach (var rec in recipes)
            {
                if (Search(rec))
                {
                    RecipeInformation r = new RecipeInformation(author: rec.Author, title: rec.Title, calories: rec.Calories, difficulty: rec.Difficulty, price: rec.Price.ToString(), rating: rec.Rating, time: rec.Time.ToString());
                    String url_with_param = "/ViewRecipe/";
                    System.Diagnostics.Debug.WriteLine("Url is: " + url_with_param);
                    <div class="col-md-auto">
                        <a style="text-decoration: none" href=@url_with_param>
                            <CookingBuddy.Pages.search.components.RecipeCard src=@rec.Media recipe=@r />
                        </a>
                    </div>
                }
                
            }
        </div>
    }


    @*<div class="row">
        <div class="col-md-auto">
            <a style="text-decoration: none" href="/ViewRecipe">
                <CookingBuddy.Pages.search.components.RecipeCard src="https://www.recipetineats.com/wp-content/uploads/2018/04/Chicken-Tikka-Masala_0.jpg" recipe=@recipesArray[0] />
            </a>
        </div>
        <div class="col-md-auto">
            <a style="text-decoration: none" href="/ViewRecipe">
                <CookingBuddy.Pages.search.components.RecipeCard src="https://www.desiblitz.com/wp-content/uploads/2017/06/history-of-chicken-tikka-masala-2.png" recipe=@recipesArray[1] />
            </a>
        </div>
    </div>*@
</div>

@code{
    public static bool timeChecked { get; set; } = false;
    public static bool caloriesChecked { get; set; } = false;
    public static bool priceChecked { get; set; } = false;
    public static bool ratingsChecked { get; set; } = false;

    public static bool expertChecked { get; set; } = true;
    public static bool homeCookChecked { get; set; } = true;
    public static bool beginnerChecked { get; set; } = true;

    public static int maxTime { get; set; } = 0;
    public static float maxCalories { get; set; } = 0;
    public static float maxRatings { get; set; } = 0;
    public static float maxPrice { get; set; } = 0;

    public static int timeFilter { get; set; } = 0;
    public static float caloriesFilter { get; set; } = 0;
    public static float ratingsFilter { get; set; } = 0;
    public static float priceFilter { get; set; } = 0;


    private static ArrayList ingredients = new ArrayList();
    public static string ingredientInput { get; set; } = "";

    [Parameter]
    public string searchBox { get; set; }="";

    public static string searchInput { get; set; } = "";

    string Error = "";
    List<Recipe> recipes = new List<Recipe>();
    Recipe objRecipe = new Recipe();

    protected override async Task OnInitializedAsync()
    {
        searchInput = searchBox;
        System.Diagnostics.Debug.WriteLine("Called");
        recipes = await RecipeServiceInj.GetRecipeAsync();
        System.Diagnostics.Debug.WriteLine("returned");
        System.Diagnostics.Debug.WriteLine("recipes size is "+ recipes.Count() );
        // setting max values
        foreach (var recipe in recipes)
        {
            recipe.Media = "https://makeyourmeals.com/wp-content/uploads/2019/06/featured-grilled-steak-735x490.jpg.webp";
            recipe.Title = "Grilled Steak";
            int currTIme = recipe.Time;
            float currCalories = float.Parse(recipe.Calories);
            float currPrice = recipe.Price;
            float currRatings =float.Parse( recipe.Rating);
            if (currTIme > maxTime)
            {
                maxTime = currTIme;
            }

            if (currCalories > maxCalories)
            {
                maxCalories = currCalories;
            }

            if (currPrice > maxPrice)
            {
                maxPrice = currPrice;
            }

            if (currRatings > maxRatings)
            {
                maxRatings = currRatings;
            }

        }


        timeFilter = maxTime;
        caloriesFilter = maxCalories;
        priceFilter = maxPrice;
        ratingsFilter = maxRatings;
    }

    public RecipeInformation[] recipesArray = new RecipeInformation[]
    {
        new RecipeInformation ( author : "Chef chi", title : "Chicken Tikka Masala Low calorie", calories : "300", difficulty : "Expert", price : "14.48", rating : "4.8", time : "30 mins" ),
        new RecipeInformation ( author : "Babish", title : "Chicken Tikka Masala Recipe", calories : "500", difficulty : "Home cook", price : "14.00", rating : "4.3", time : "2 hrs" )

    };

    private void IngredientChanged(KeyboardEventArgs eventArgs)
    {

        //ingredientInput = obj.Value.ToString();

        if (eventArgs.Key == "Enter")        // fire on enter
        {
            if (ingredientInput.Length > 0)
            {
                ingredients.Add(ingredientInput);
            }
        }
        ingredientInput = "";

    }

    private void ClearIngredient()
    {
        ingredientInput = "";

    }

    private bool Search(Recipe recipe)
    {

        int currTIme = recipe.Time;
        float currCalories = float.Parse(recipe.Calories);
        float currPrice = recipe.Price;
        float currRatings = float.Parse(recipe.Rating);

        if (currTIme > timeFilter || currCalories > caloriesFilter || currPrice > priceFilter || currRatings > ratingsFilter || (!recipe.Title.ToUpper().Contains(searchInput.ToUpper()) && !searchInput.ToUpper().Contains(recipe.Title.ToUpper())))
        {
            return false;
        }

        if ((expertChecked && (recipe.Difficulty.Equals("Expert") || recipe.Difficulty.Equals("Hard"))) || (homeCookChecked && (recipe.Difficulty.Equals("Medium") || recipe.Difficulty.Equals("Home Cook"))) ||(beginnerChecked &&(recipe.Difficulty.Equals("Beginner"))) )
        {
            return true;
        } else
        {
            return false;
        }

        



        return true;
    }


}