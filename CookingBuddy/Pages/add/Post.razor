@page "/post"
@using CookingBuddy.Models
@using CookingBuddy.Services
@using System.Collections.Generic;
@inject RecipeService RecipeServiceInj
@using CookingBuddy.Pages.add;
@using System.Collections;

<h1 class="text-center"></h1>

<div class="container justify-content-around">
    <form>
        <div class="row mb-3">
            <label for="title" class="form-label">Title</label>
            <input type="text" class="form-control" @bind="recipe.Title" id="title" list="list.Title" />
        </div>
        <div class="row mb-3">
            <label for="formFile" class="form-label">Add Media</label>
            <input class="form-control" type="file" @bind="recipe.Media" id="mediaFile">
        </div>
        <div class="row mb-3">
            <label for="price" class="form-label">Price</label>
            <div class="input-group mb-3">
                <span class="input-group-text">$</span>
                <input type="text" class="form-control" @bind="recipe.Price" id="price" />
                <span class="input-group-text">/Serving</span>
            </div>
        </div>
        <div class="row mb-3">
            <label for="yield" class="form-label">Yield</label>
            <div class="input-group mb-3">
                <select class="form-select" @bind="recipe.Yield" id="yield">
                    <option selected>Choose...</option>
                    <option value="1">1</option>
                    <option value="2">2</option>
                    <option value="3">3</option>
                    <option value="4">4</option>
                    <option value="5">5</option>
                    <option value="6">6</option>
                    <option value="7">7</option>
                    <option value="8">8</option>
                    <option value="9">9</option>
                    <option value="10">10</option>
                </select>
                <span class="input-group-text">Servings</span>
            </div>
        </div>
        <div class="row mb-3">
            <label for="time" class="form-label">Time</label>
            <div class="input-group mb-3">
                <input type="number" class="form-control" @bind="recipe.Time" id="time" />
                <span class="input-group-text">Minutes</span>
            </div>
        </div>

        <h4 class="text-center">Ingredients</h4>
        <div class="table-responsive">
            <table class="table">
                <thead>
                    <tr>
                        <th scope="col">#</th>
                        <th scope="col">Amount</th>
                        <th scope="col">Units</th>
                        <th scope="col">Ingredient</th>
                        <th scope="col"></th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <th scope="row">1</th>
                        <td><input class="form-control" type="text" placeholder="qty"></td>
                        <td>
                            <div class="input-group mb-3">
                                <select placeholder="unit" class="form-select">
                                    <option>--</option>
                                    <option>tsp</option>
                                    <option>tbsp</option>
                                    <option>cups</option>
                                    <option>pinch</option>
                                    <option>mL</option>
                                    <option>L</option>
                                    <option>slices</option>
                                    <option>pound</option>
                                </select>
                            </div>

                        </td>
                        <td><input class="form-control" type="text" placeholder="ing" list="list.Ingredient"></td>
                        <td><button class="btn btn-danger"><i class="bi bi-trash"></i></button></td>
                    </tr>


                    <!--==================================== START OF INPUT INGREDIENT BUTTON ========================================-->
                    @foreach (var ing in ingredients)
                    {

                        <tr @key="@ing">
                            <th scope="row">@ing</th>
                            <td><input class="form-control" type="text" placeholder="qty"></td>
                            <td>
                                <div class="input-group mb-3">
                                    <select placeholder="unit" class="form-select">
                                        <option>--</option>
                                        <option>tsp</option>
                                        <option>tbsp</option>
                                        <option>cups</option>
                                        <option>pinch</option>
                                        <option>mL</option>
                                        <option>L</option>
                                        <option>slices</option>
                                        <option>pound</option>
                                    </select>
                                </div>

                            </td>
                            <td><input class="form-control" type="text" placeholder="ing" list="list.Ingredient"></td>
                            <td><span class="btn btn-danger" @onclick="@(()=>ingredients.Remove(ing))"><i class="bi bi-trash"></i></span></td>
                        </tr>
                    }

                </tbody>
            </table>
        </div>

        <!--Button for adding ingredients -->

        <a class="btn btn-primary" @onclick="@IngredientAdd">Add Ingredient</a>

        @if (ingredientInput.Length > 0)
        {

            <i @onclick="ClearIngredient" class="bi bi-x-lg position-absolute"
           style="
                              right: 10px;
                              cursor: pointer;
                              z-index: 100;">
            </i>
        }


        <!--==================================== END OF INPUT INGREDIENT BUTTON ========================================-->


        <!-- ====================================== START OF ADD STEPS ===========================================================  -->

        <br />
        <br />
        <div class="card">
            <div class="card-header">
                <h5 class="card-title">Stages</h5>
                <ul class="nav nav-tabs card-header-tabs" data-bs-tabs="tabs">
                    <li class="nav-item">
                        <a class="nav-link active" aria-current="true" data-bs-toggle="tab" href="#stage1">Stage 1</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" data-bs-toggle="tab" href="#stage2">Stage 2</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" data-bs-toggle="tab" href="#stage3">Stage 3</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" data-bs-toggle="tab" href="#addstage"><i class="bi bi-plus"></i></a>
                    </li>
                </ul>
            </div>

<!--Start of stage 1-->

            <div class="card-body tab-content">
                <div class="tab-pane active" id="stage1">
                    
                    <div class="card mb-3">
                        <div class="card-body">
                            <h4 class="card-title">Step 1

                            </h4>
                            <textarea class="form-control" id="instructionArea1" rows="3"></textarea>
                        </div>
                    </div>

                    <!--Begin adding steps----->

                    @foreach (var stp in steps)
                    {

                           
                                <div class="card mb-3" id="stage3" @key="@stp">
                                    <div class="card-body">
                                        <h4 class="card-title">Step @stp

                                            <td style="float: right"><span class="btn btn-danger" @onclick="@(()=>steps.Remove(stp))"><i class="bi-x-lg"></i></span></td>
                                        </h4>
                                        <textarea class="form-control" id="instructionArea1" rows="3"></textarea>
                                    </div>
                                </div>
                            

                        

                    }


<!--End of stage 1-->

                </div>
                <div class="tab-pane" id="stage2">
                    <div class="card mb-3">
                        <div class="card-body">
                            <h4 class="card-title">Step 1</h4>
                            <textarea class="form-control" id="instructionArea1" rows="3"></textarea>
                        </div>
                    </div>
                </div>
                <div class="tab-pane" id="stage3">
                    <div class="card mb-3">
                        <div class="card-body">
                            <h4 class="card-title">Step 1</h4>
                            <textarea class="form-control" id="instructionArea1" rows="3"></textarea>
                        </div>
                    </div>
                </div>
                <div class="tab-pane" id="stage1">
                    <div class="card mb-3">
                        <div class="card-body">
                            <h4 class="card-title">Step 2</h4>
                            <textarea class="form-control" id="instructionArea1" rows="3"></textarea>
                        </div>
                    </div>
                </div>




                <div class="tab-pane" id="addstage">
                    <div class="card mb-3">
                        <div class="card-body">
                            <h4 class="card-title">Step 1</h4>
                            <textarea class="form-control" id="instructionArea1" rows="3"></textarea>
                        </div>
                    </div>
                </div>




                <!--Button for adding ingredients -->

                <a class="btn btn-primary" @onclick="@StepAdd">Add Step</a>

                @if (stepInput.Length > 0)
                {

                    <i @onclick="ClearSteps" class="bi bi-x-lg position-absolute"
                   style="
                              right: 10px;
                              cursor: pointer;
                              z-index: 100;">
                    </i>
                }


            </div>
        </div>
        <br />


        <!-- ====================================== END OF ADD STEPS ===========================================================  -->



        <div class="btn-group d-flex">
            <a href="#" class="btn btn-danger flex-even">Save as draft</a>
            <a href="#" class="btn btn-primary flex-even" @onclick="SaveRecipe">Post</a>
        </div>
    </form>
    <br />
    <br />



</div>

<!-- ====================================== CODE ===========================================================  -->
@code {
    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public string Link { get; set; }

    [Parameter]
    public string Src { get; set; }

    public Recipe recipe = new Recipe();

    public void AddRecipe()
    {
        recipe = new Recipe();
        recipe.Id = 0;
    }


    async Task SaveRecipe()
    {
        try
        {
            if (recipe.Id == 0)
            {
                Recipe newRecipe = new Recipe();
                newRecipe.Title = recipe.Title;
                newRecipe.Media = "https://i.ytimg.com/vi/ISGbUMaDC7w/hqdefault.jpg";
                newRecipe.Price = recipe.Price;
                newRecipe.Yield = recipe.Yield;
                newRecipe.Time = recipe.Time;
                var list_autors = new List<string> { "Alice", "Bob", "John Doe", "Jane Doe", };
                var random = new Random();
                newRecipe.Author = list_autors[random.Next(list_autors.Count)];
                var list_calories = new List<string> { "300", "350", "400", "200","1000","1500" };
                newRecipe.Calories = list_calories[random.Next(list_calories.Count)];
                var list_rating = new List<string> { "1", "2", "3", "4","5" };
                newRecipe.Rating = list_rating[random.Next(list_rating.Count)];
                var list_diffculty = new List<string> { "Beginner","Home Cook", "Expert"};
                newRecipe.Difficulty = list_diffculty[random.Next(list_diffculty.Count)];

                var newRecipeObj = await RecipeServiceInj.CreateRecipeAsync(newRecipe);

            }
            else
            {
                await RecipeServiceInj.UpdateRecipeAsync(recipe);
            }
        }
        catch (Exception exception)
        {
            Console.WriteLine(exception.Message);
        }
    }
}

<!-- Created id names for each data list  -->

<datalist id="list.Title"
    <div>
    @for (var @item = 0; @item < @titleData.titleList.Length; @item++)
        {
                <option>@titleData.titleList[item]</option>
        }
    </div>
</datalist>


<datalist id="list.Ingredient"
    <div>
        @for (var @item = 0; @item < @ingredientsData.titleList.Length; @item++)
        {
                <option>@ingredientsData.titleList[item]</option>
        }
    </div>
</datalist>


<datalist id="list.Units"
    <div>
        @for (var @item = 0; @item < @unitsData.titleList.Length; @item++)
        {
                <option>@unitsData.titleList[item]</option>
        }
     </div>
</datalist>



<!-- ====================================== CODE ===========================================================  -->
@code {
    private static ArrayList ingredients = new ArrayList();
    private static ArrayList steps = new ArrayList();


    //List for recipe titles
    dataList titleData = new dataList(new String[]{"Alfredo Chicken", "Apple Crumble Pie", "Banana Bread",
                                            "Beef Stew", "Butter Chicken", "Chicken Tikka Masala", "Chicken Stew",
                                            "Chili", "Deviled Eggs", "Fish Stew", "French Toast", "Lemon Meringue Pie",
                                            "Mashed Potatoes", "Pancakes", "Shepherd's Pie"});

    //List for ingredients
    dataList ingredientsData = new dataList(new String[]{"Sugar", "Salt", "Butter", "Cheese", "Onion", "Lettuce", "Cucumber",
                                            "Margarine", "Egg", "Flour", "Milk", "Parsley", "Paprika", "Tomato", "Garlic",
                                            "Potato", "Black Pepper", "Carrot"});

    //List for units
    dataList unitsData = new dataList(new String[] { "tsp", "tbsp", "cups", "pinch", "mL", "L", "sliced" });


    private List<dataList> lines = new List<dataList>();
    private async Task removeRow(int linenumber)
    {
        lines = lines.Where(u => lines.IndexOf(u) != linenumber).ToList();

    }

    static int inputValue = 2;
    static int inputValue2 = 2;


    public static string ingredientInput { get; set; } = inputValue.ToString();
    public static string stepInput { get; set; } = inputValue2.ToString();

    private String getIngredientID()
    {
        return inputValue.ToString();
    }

    private String getStepID()
    {
        return inputValue.ToString();
    }

    private void IngredientAdd()
    {
        if (ingredientInput.Length > 0)
        {
            if (!ingredients.Contains(ingredientInput))
            {
                ingredients.Add(ingredientInput);
                inputValue++;
            }
        }
        ingredientInput = inputValue.ToString();
    }

    private void StepAdd()
    {
        if (stepInput.Length > 0)
        {
            if (!steps.Contains(stepInput))
            {
                steps.Add(stepInput);
                inputValue2++;
            }
        }
        stepInput = inputValue2.ToString();
    }


    private void ClearIngredient()
    {
        ingredientInput = "";

    }

    private void ClearSteps()
    {
        stepInput = "";

    }

    private void RemoveIngredient(int index)
    {
        inputValue = ingredients.Count;
        ingredients.RemoveAt(index);
    }

    private void RemoveSteps(int index)
    {
        inputValue2 = steps.Count;
        steps.RemoveAt(index);
    }




}
